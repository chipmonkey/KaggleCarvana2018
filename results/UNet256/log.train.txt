
--- [START 2017-08-11 14:09:35] ----------------------------------------------------------------

** some project setting **
	SEED    = 235202
	file    = /root/share/project/kaggle-carvana-cars/build/car-segment_double/train_seg_net.py
	out_dir = /root/share/project/kaggle-carvana-cars/results/baseline/UNet256-00

** dataset setting **
	train_dataset.split = train_v0_4320
	valid_dataset.split = valid_v0_768
	test_dataset.split  = test_3197
	len(train_dataset)  = 4320
	len(valid_dataset)  = 768
	len(test_dataset)   = 3197
** net setting **
<class 'net.segmentation.my_unet_baseline.UNet256'>

UNet256 (
  (down2): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (down3): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (down4): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (down5): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (down6): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (center): Sequential (
    (0): ConvBnRelu2d (
      (conv): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
    )
  )
  (up6): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (up5): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (up4): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (up3): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (up2): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (classify): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
)

    def __init__(self, in_shape):
        super(UNet256, self).__init__()
        C,H,W = in_shape
        assert(C==3)


        #1024
        #self.down0 = StackEncoder( 3,   16, kernel_size=3)   #512
        #self.down1 = StackEncoder(16,   32, kernel_size=3)   #256
        self.down2 = StackEncoder(  C,   64, kernel_size=3)   #128
        self.down3 = StackEncoder( 64,  128, kernel_size=3)   # 64
        self.down4 = StackEncoder(128,  256, kernel_size=3)   # 32
        self.down5 = StackEncoder(256,  512, kernel_size=3)   # 16
        self.down6 = StackEncoder(512, 1024, kernel_size=3)   #  8


        self.center = nn.Sequential(
            #ConvBnRelu2d( 512, 1024, kernel_size=3, padding=1, stride=1 ),
            ConvBnRelu2d(1024, 1024, kernel_size=3, padding=1, stride=1 ),
        )

        # 8
        # x_big_channels, x_channels, y_channels
        self.up6 = StackDecoder(1024,1024, 512, kernel_size=3)  # 16
        self.up5 = StackDecoder( 512, 512, 256, kernel_size=3)  # 32
        self.up4 = StackDecoder( 256, 256, 128, kernel_size=3)  # 64
        self.up3 = StackDecoder( 128, 128,  64, kernel_size=3)  #128
        self.up2 = StackDecoder(  64,  64,  32, kernel_size=3)  #256
        #self.up1 = StackDecoder(  32,  32,  32, kernel_size=3) #512
        #self.up0 = StackDecoder(16,   16,  16) #1024

        self.classify = nn.Conv2d(32, 1, kernel_size=1, padding=0, stride=1, bias=True)


    def forward(self, x):

        out = x                       #;print('x    ',x.size())
                                      #
        #down0,out = self.down0(out)  ##;print('down0',down0.size())  #512
        #down1,out = self.down1(out)  ##;print('down1',down1.size())  #256
        down2,out = self.down2(out)   #;print('down2',down2.size())  #128
        down3,out = self.down3(out)   #;print('down3',down3.size())  #64
        down4,out = self.down4(out)   #;print('down4',down4.size())  #32
        down5,out = self.down5(out)   #;print('down5',down5.size())  #16
        down6,out = self.down6(out)   #;print('down6',down6.size())  #8
        pass                          #;print('out  ',out.size())

        out = self.center(out)
        out = self.up6(down6, out)
        out = self.up5(down5, out)
        out = self.up4(down4, out)
        out = self.up3(down3, out)
        out = self.up2(down2, out)
        #out = self.up1(down1, out)
        #out = self.up0(down0, out)
        #1024

        out = self.classify(out)
        out = torch.squeeze(out, dim=1)
        return out


** start training here! **
 num_grad_acc x batch_size = 0 x 32=0
 optimizer=<torch.optim.sgd.SGD object at 0x7fbe5b0e2128>
 LR=Step Learning Rates
rates=[' 0.0100', ' 0.0050', ' 0.0010', ' 0.0001', '-1.0000']
steps=['      0', '     35', '     40', '     42', '     44']


epoch    iter      rate   | valid_loss/acc | train_loss/acc | batch_loss/acc ... 
--------------------------------------------------------------------------------------------------

--- [START 2017-08-11 14:09:53] ----------------------------------------------------------------

** some project setting **
	SEED    = 235202
	file    = /root/share/project/kaggle-carvana-cars/build/car-segment_double/train_seg_net.py
	out_dir = /root/share/project/kaggle-carvana-cars/results/baseline/UNet256-00

** dataset setting **
	train_dataset.split = train_v0_4320
	valid_dataset.split = valid_v0_768
	test_dataset.split  = test_3197
	len(train_dataset)  = 4320
	len(valid_dataset)  = 768
	len(test_dataset)   = 3197
** net setting **
<class 'net.segmentation.my_unet_baseline.UNet256'>

UNet256 (
  (down2): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (down3): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (down4): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (down5): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (down6): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (center): Sequential (
    (0): ConvBnRelu2d (
      (conv): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
    )
  )
  (up6): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (up5): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (up4): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (up3): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (up2): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (classify): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
)

    def __init__(self, in_shape):
        super(UNet256, self).__init__()
        C,H,W = in_shape
        assert(C==3)


        #1024
        #self.down0 = StackEncoder( 3,   16, kernel_size=3)   #512
        #self.down1 = StackEncoder(16,   32, kernel_size=3)   #256
        self.down2 = StackEncoder(  C,   64, kernel_size=3)   #128
        self.down3 = StackEncoder( 64,  128, kernel_size=3)   # 64
        self.down4 = StackEncoder(128,  256, kernel_size=3)   # 32
        self.down5 = StackEncoder(256,  512, kernel_size=3)   # 16
        self.down6 = StackEncoder(512, 1024, kernel_size=3)   #  8


        self.center = nn.Sequential(
            #ConvBnRelu2d( 512, 1024, kernel_size=3, padding=1, stride=1 ),
            ConvBnRelu2d(1024, 1024, kernel_size=3, padding=1, stride=1 ),
        )

        # 8
        # x_big_channels, x_channels, y_channels
        self.up6 = StackDecoder(1024,1024, 512, kernel_size=3)  # 16
        self.up5 = StackDecoder( 512, 512, 256, kernel_size=3)  # 32
        self.up4 = StackDecoder( 256, 256, 128, kernel_size=3)  # 64
        self.up3 = StackDecoder( 128, 128,  64, kernel_size=3)  #128
        self.up2 = StackDecoder(  64,  64,  32, kernel_size=3)  #256
        #self.up1 = StackDecoder(  32,  32,  32, kernel_size=3) #512
        #self.up0 = StackDecoder(16,   16,  16) #1024

        self.classify = nn.Conv2d(32, 1, kernel_size=1, padding=0, stride=1, bias=True)


    def forward(self, x):

        out = x                       #;print('x    ',x.size())
                                      #
        #down0,out = self.down0(out)  ##;print('down0',down0.size())  #512
        #down1,out = self.down1(out)  ##;print('down1',down1.size())  #256
        down2,out = self.down2(out)   #;print('down2',down2.size())  #128
        down3,out = self.down3(out)   #;print('down3',down3.size())  #64
        down4,out = self.down4(out)   #;print('down4',down4.size())  #32
        down5,out = self.down5(out)   #;print('down5',down5.size())  #16
        down6,out = self.down6(out)   #;print('down6',down6.size())  #8
        pass                          #;print('out  ',out.size())

        out = self.center(out)
        out = self.up6(down6, out)
        out = self.up5(down5, out)
        out = self.up4(down4, out)
        out = self.up3(down3, out)
        out = self.up2(down2, out)
        #out = self.up1(down1, out)
        #out = self.up0(down0, out)
        #1024

        out = self.classify(out)
        out = torch.squeeze(out, dim=1)
        return out


** start training here! **
 num_grad_acc x batch_size = 1 x 32=32
 optimizer=<torch.optim.sgd.SGD object at 0x7f674d7acf60>
 LR=Step Learning Rates
rates=[' 0.0100', ' 0.0050', ' 0.0010', ' 0.0001', '-1.0000']
steps=['      0', '     35', '     40', '     42', '     44']


epoch    iter      rate   | valid_loss/acc | train_loss/acc | batch_loss/acc ... 
--------------------------------------------------------------------------------------------------

--- [START 2017-08-11 14:11:04] ----------------------------------------------------------------

** some project setting **
	SEED    = 235202
	file    = /root/share/project/kaggle-carvana-cars/build/car-segment_double/train_seg_net.py
	out_dir = /root/share/project/kaggle-carvana-cars/results/baseline/UNet256-00

** dataset setting **
	train_dataset.split = train_v0_4320
	valid_dataset.split = valid_v0_768
	test_dataset.split  = test_3197
	len(train_dataset)  = 4320
	len(valid_dataset)  = 768
	len(test_dataset)   = 3197
** net setting **
<class 'net.segmentation.my_unet_baseline.UNet256'>

UNet256 (
  (down2): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (down3): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (down4): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (down5): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (down6): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (center): Sequential (
    (0): ConvBnRelu2d (
      (conv): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
    )
  )
  (up6): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (up5): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (up4): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (up3): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (up2): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (classify): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
)

    def __init__(self, in_shape):
        super(UNet256, self).__init__()
        C,H,W = in_shape
        assert(C==3)


        #1024
        #self.down0 = StackEncoder( 3,   16, kernel_size=3)   #512
        #self.down1 = StackEncoder(16,   32, kernel_size=3)   #256
        self.down2 = StackEncoder(  C,   64, kernel_size=3)   #128
        self.down3 = StackEncoder( 64,  128, kernel_size=3)   # 64
        self.down4 = StackEncoder(128,  256, kernel_size=3)   # 32
        self.down5 = StackEncoder(256,  512, kernel_size=3)   # 16
        self.down6 = StackEncoder(512, 1024, kernel_size=3)   #  8


        self.center = nn.Sequential(
            #ConvBnRelu2d( 512, 1024, kernel_size=3, padding=1, stride=1 ),
            ConvBnRelu2d(1024, 1024, kernel_size=3, padding=1, stride=1 ),
        )

        # 8
        # x_big_channels, x_channels, y_channels
        self.up6 = StackDecoder(1024,1024, 512, kernel_size=3)  # 16
        self.up5 = StackDecoder( 512, 512, 256, kernel_size=3)  # 32
        self.up4 = StackDecoder( 256, 256, 128, kernel_size=3)  # 64
        self.up3 = StackDecoder( 128, 128,  64, kernel_size=3)  #128
        self.up2 = StackDecoder(  64,  64,  32, kernel_size=3)  #256
        #self.up1 = StackDecoder(  32,  32,  32, kernel_size=3) #512
        #self.up0 = StackDecoder(16,   16,  16) #1024

        self.classify = nn.Conv2d(32, 1, kernel_size=1, padding=0, stride=1, bias=True)


    def forward(self, x):

        out = x                       #;print('x    ',x.size())
                                      #
        #down0,out = self.down0(out)  ##;print('down0',down0.size())  #512
        #down1,out = self.down1(out)  ##;print('down1',down1.size())  #256
        down2,out = self.down2(out)   #;print('down2',down2.size())  #128
        down3,out = self.down3(out)   #;print('down3',down3.size())  #64
        down4,out = self.down4(out)   #;print('down4',down4.size())  #32
        down5,out = self.down5(out)   #;print('down5',down5.size())  #16
        down6,out = self.down6(out)   #;print('down6',down6.size())  #8
        pass                          #;print('out  ',out.size())

        out = self.center(out)
        out = self.up6(down6, out)
        out = self.up5(down5, out)
        out = self.up4(down4, out)
        out = self.up3(down3, out)
        out = self.up2(down2, out)
        #out = self.up1(down1, out)
        #out = self.up0(down0, out)
        #1024

        out = self.classify(out)
        out = torch.squeeze(out, dim=1)
        return out


** start training here! **
 num_grad_acc x batch_size = 1 x 32=32
 optimizer=<torch.optim.sgd.SGD object at 0x7f979d247f60>
 LR=Step Learning Rates
rates=[' 0.0100', ' 0.0050', ' 0.0010', ' 0.0001', '-1.0000']
steps=['      0', '     35', '     40', '     42', '     44']


epoch    iter      rate   | valid_loss/acc | train_loss/acc | batch_loss/acc ... 
--------------------------------------------------------------------------------------------------

--- [START 2017-08-11 14:11:39] ----------------------------------------------------------------

** some project setting **
	SEED    = 235202
	file    = /root/share/project/kaggle-carvana-cars/build/car-segment_double/train_seg_net.py
	out_dir = /root/share/project/kaggle-carvana-cars/results/baseline/UNet256-00

** dataset setting **
	train_dataset.split = train_v0_4320
	valid_dataset.split = valid_v0_768
	test_dataset.split  = test_3197
	len(train_dataset)  = 4320
	len(valid_dataset)  = 768
	len(test_dataset)   = 3197
** net setting **
<class 'net.segmentation.my_unet_baseline.UNet256'>

UNet256 (
  (down2): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (down3): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (down4): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (down5): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (down6): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (center): Sequential (
    (0): ConvBnRelu2d (
      (conv): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
    )
  )
  (up6): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (up5): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (up4): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (up3): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (up2): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (classify): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
)

    def __init__(self, in_shape):
        super(UNet256, self).__init__()
        C,H,W = in_shape
        assert(C==3)


        #1024
        #self.down0 = StackEncoder( 3,   16, kernel_size=3)   #512
        #self.down1 = StackEncoder(16,   32, kernel_size=3)   #256
        self.down2 = StackEncoder(  C,   64, kernel_size=3)   #128
        self.down3 = StackEncoder( 64,  128, kernel_size=3)   # 64
        self.down4 = StackEncoder(128,  256, kernel_size=3)   # 32
        self.down5 = StackEncoder(256,  512, kernel_size=3)   # 16
        self.down6 = StackEncoder(512, 1024, kernel_size=3)   #  8


        self.center = nn.Sequential(
            #ConvBnRelu2d( 512, 1024, kernel_size=3, padding=1, stride=1 ),
            ConvBnRelu2d(1024, 1024, kernel_size=3, padding=1, stride=1 ),
        )

        # 8
        # x_big_channels, x_channels, y_channels
        self.up6 = StackDecoder(1024,1024, 512, kernel_size=3)  # 16
        self.up5 = StackDecoder( 512, 512, 256, kernel_size=3)  # 32
        self.up4 = StackDecoder( 256, 256, 128, kernel_size=3)  # 64
        self.up3 = StackDecoder( 128, 128,  64, kernel_size=3)  #128
        self.up2 = StackDecoder(  64,  64,  32, kernel_size=3)  #256
        #self.up1 = StackDecoder(  32,  32,  32, kernel_size=3) #512
        #self.up0 = StackDecoder(16,   16,  16) #1024

        self.classify = nn.Conv2d(32, 1, kernel_size=1, padding=0, stride=1, bias=True)


    def forward(self, x):

        out = x                       #;print('x    ',x.size())
                                      #
        #down0,out = self.down0(out)  ##;print('down0',down0.size())  #512
        #down1,out = self.down1(out)  ##;print('down1',down1.size())  #256
        down2,out = self.down2(out)   #;print('down2',down2.size())  #128
        down3,out = self.down3(out)   #;print('down3',down3.size())  #64
        down4,out = self.down4(out)   #;print('down4',down4.size())  #32
        down5,out = self.down5(out)   #;print('down5',down5.size())  #16
        down6,out = self.down6(out)   #;print('down6',down6.size())  #8
        pass                          #;print('out  ',out.size())

        out = self.center(out)
        out = self.up6(down6, out)
        out = self.up5(down5, out)
        out = self.up4(down4, out)
        out = self.up3(down3, out)
        out = self.up2(down2, out)
        #out = self.up1(down1, out)
        #out = self.up0(down0, out)
        #1024

        out = self.classify(out)
        out = torch.squeeze(out, dim=1)
        return out


** start training here! **
 num_grad_acc x batch_size = 1 x 16=16
 optimizer=<torch.optim.sgd.SGD object at 0x7f5ea00faf60>
 LR=Step Learning Rates
rates=[' 0.0100', ' 0.0050', ' 0.0010', ' 0.0001', '-1.0000']
steps=['      0', '     35', '     40', '     42', '     44']


epoch    iter      rate   | valid_loss/acc | train_loss/acc | batch_loss/acc ... 
--------------------------------------------------------------------------------------------------
  1.0     270    0.0100   | 0.0391  0.9859 | 0.0492  0.9820 | 0.0541  0.9803  |  2.1 min 
  2.0     270    0.0100   | 0.0288  0.9889 | 0.0357  0.9863 | 0.0315  0.9876  |  2.0 min 
  3.0     270    0.0100   | 0.0239  0.9908 | 0.0286  0.9890 | 0.0271  0.9889  |  2.1 min 
  4.0     270    0.0100   | 0.1056  0.9528 | 0.0692  0.9732 | 0.0556  0.9780  |  2.0 min 
  5.0     270    0.0100   | 0.0233  0.9906 | 0.0278  0.9889 | 0.0310  0.9877  |  2.0 min 
  6.0     270    0.0100   | 0.0208  0.9916 | 0.0257  0.9899 | 0.0271  0.9889  |  2.0 min 
  7.0     270    0.0100   | 0.0187  0.9924 | 0.0223  0.9911 | 0.0213  0.9918  |  2.0 min 
  8.0     270    0.0100   | 0.0190  0.9922 | 0.0216  0.9914 | 0.0200  0.9921  |  2.0 min 
  9.0     270    0.0100   | 0.0175  0.9929 | 0.0215  0.9916 | 0.0222  0.9908  |  2.0 min 
 10.0     270    0.0100   | 0.0170  0.9931 | 0.0213  0.9915 | 0.0204  0.9919  |  2.0 min 
 11.0     270    0.0100   | 0.0165  0.9933 | 0.0195  0.9922 | 0.0183  0.9927  |  2.0 min 
 12.0     270    0.0100   | 0.0175  0.9929 | 0.0211  0.9916 | 0.0241  0.9906  |  2.1 min 
 13.0     270    0.0100   | 0.0163  0.9934 | 0.0196  0.9922 | 0.0189  0.9924  |  2.1 min 
 14.0     270    0.0100   | 0.0160  0.9935 | 0.0189  0.9924 | 0.0207  0.9914  |  2.0 min 
 15.0     270    0.0100   | 0.0153  0.9938 | 0.0182  0.9927 | 0.0179  0.9929  |  2.0 min 
 16.0     270    0.0100   | 0.0152  0.9938 | 0.0176  0.9930 | 0.0190  0.9927  |  2.0 min 
 17.0     270    0.0100   | 0.0155  0.9937 | 0.0191  0.9924 | 0.0139  0.9945  |  2.0 min 
 18.0     270    0.0100   | 0.0151  0.9939 | 0.0175  0.9929 | 0.0167  0.9935  |  2.0 min 
 19.0     270    0.0100   | 0.0154  0.9937 | 0.0169  0.9933 | 0.0197  0.9923  |  2.0 min 
 20.0     270    0.0100   | 0.0146  0.9940 | 0.0173  0.9931 | 0.0184  0.9928  |  2.0 min 
 21.0     270    0.0100   | 0.0142  0.9942 | 0.0171  0.9932 | 0.0153  0.9938  |  2.0 min 
 22.0     270    0.0100   | 0.0145  0.9941 | 0.0166  0.9933 | 0.0177  0.9929  |  2.0 min 
 23.0     270    0.0100   | 0.0141  0.9943 | 0.0167  0.9932 | 0.0172  0.9929  |  2.0 min 
 24.0     270    0.0100   | 0.0139  0.9943 | 0.0163  0.9935 | 0.0140  0.9942  |  2.0 min 
 25.0     270    0.0100   | 0.0142  0.9942 | 0.0172  0.9933 | 0.0155  0.9938  |  2.0 min 
 26.0     270    0.0100   | 0.0159  0.9935 | 0.0159  0.9937 | 0.0173  0.9935  |  2.0 min 
 27.0     270    0.0100   | 0.0137  0.9944 | 0.0157  0.9937 | 0.0165  0.9934  |  2.0 min 
 28.0     270    0.0100   | 0.0137  0.9945 | 0.0148  0.9940 | 0.0138  0.9943  |  2.0 min 
 29.0     270    0.0100   | 0.0133  0.9946 | 0.0156  0.9938 | 0.0137  0.9946  |  2.0 min 
 30.0     270    0.0100   | 0.0145  0.9941 | 0.0164  0.9934 | 0.0162  0.9940  |  2.0 min 
 31.0     270    0.0100   | 0.0134  0.9946 | 0.0152  0.9939 | 0.0137  0.9946  |  2.0 min 
 32.0     270    0.0100   | 0.0134  0.9946 | 0.0153  0.9939 | 0.0145  0.9940  |  2.0 min 
 33.0     270    0.0100   | 0.0140  0.9943 | 0.0147  0.9941 | 0.0119  0.9949  |  2.0 min 
 34.0     270    0.0100   | 0.0138  0.9944 | 0.0155  0.9938 | 0.0137  0.9947  |  2.0 min 
 35.0     270    0.0100   | 0.0132  0.9947 | 0.0148  0.9941 | 0.0149  0.9937  |  2.0 min 
 36.0     270    0.0050   | 0.0125  0.9949 | 0.0139  0.9945 | 0.0129  0.9947  |  2.0 min 
 37.0     270    0.0050   | 0.0131  0.9947 | 0.0139  0.9944 | 0.0143  0.9943  |  2.0 min 
 38.0     270    0.0050   | 0.0124  0.9949 | 0.0140  0.9944 | 0.0156  0.9939  |  2.0 min 
 39.0     270    0.0050   | 0.0124  0.9949 | 0.0144  0.9943 | 0.0139  0.9948  |  2.0 min 
 40.0     270    0.0050   | 0.0129  0.9948 | 0.0145  0.9942 | 0.0151  0.9940  |  2.0 min 
 41.0     270    0.0010   | 0.0121  0.9951 | 0.0136  0.9946 | 0.0141  0.9941  |  2.0 min 
 42.0     270    0.0010   | 0.0121  0.9951 | 0.0139  0.9945 | 0.0150  0.9942  |  2.0 min 
 43.0     270    0.0001   | 0.0121  0.9951 | 0.0133  0.9946 | 0.0157  0.9941  |  2.0 min 
 44.0     270    0.0001   | 0.0120  0.9951 | 0.0132  0.9947 | 0.0125  0.9948  |  2.0 min 

alltime = 93.190291 min

--- [START 2017-08-11 16:47:23] ----------------------------------------------------------------

** some project setting **
	SEED    = 235202
	file    = /root/share/project/kaggle-carvana-cars/build/car-segment_double/train_seg_net.py
	out_dir = /root/share/project/kaggle-carvana-cars/results/baseline/UNet256-00

** dataset setting **
	train_dataset.split = train_v0_4320
	valid_dataset.split = valid_v0_768
	test_dataset.split  = test_3197
	len(train_dataset)  = 4320
	len(valid_dataset)  = 768
	len(test_dataset)   = 3197
** net setting **
<class 'net.segmentation.my_unet_baseline.UNet256'>

UNet256 (
  (down2): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (down3): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (down4): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (down5): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (down6): StackEncoder (
    (encode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (center): Sequential (
    (0): ConvBnRelu2d (
      (conv): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
    )
  )
  (up6): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (up5): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (up4): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (up3): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (up2): StackDecoder (
    (decode): Sequential (
      (0): ConvBnRelu2d (
        (conv): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (1): ConvBnRelu2d (
        (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
      (2): ConvBnRelu2d (
        (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.0001, momentum=0.1, affine=True)
        (relu): ReLU (inplace)
      )
    )
  )
  (classify): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
)

    def __init__(self, in_shape):
        super(UNet256, self).__init__()
        C,H,W = in_shape
        assert(C==3)


        #1024
        #self.down0 = StackEncoder( 3,   16, kernel_size=3)   #512
        #self.down1 = StackEncoder(16,   32, kernel_size=3)   #256
        self.down2 = StackEncoder(  C,   64, kernel_size=3)   #128
        self.down3 = StackEncoder( 64,  128, kernel_size=3)   # 64
        self.down4 = StackEncoder(128,  256, kernel_size=3)   # 32
        self.down5 = StackEncoder(256,  512, kernel_size=3)   # 16
        self.down6 = StackEncoder(512, 1024, kernel_size=3)   #  8


        self.center = nn.Sequential(
            #ConvBnRelu2d( 512, 1024, kernel_size=3, padding=1, stride=1 ),
            ConvBnRelu2d(1024, 1024, kernel_size=3, padding=1, stride=1 ),
        )

        # 8
        # x_big_channels, x_channels, y_channels
        self.up6 = StackDecoder(1024,1024, 512, kernel_size=3)  # 16
        self.up5 = StackDecoder( 512, 512, 256, kernel_size=3)  # 32
        self.up4 = StackDecoder( 256, 256, 128, kernel_size=3)  # 64
        self.up3 = StackDecoder( 128, 128,  64, kernel_size=3)  #128
        self.up2 = StackDecoder(  64,  64,  32, kernel_size=3)  #256
        #self.up1 = StackDecoder(  32,  32,  32, kernel_size=3) #512
        #self.up0 = StackDecoder(16,   16,  16) #1024

        self.classify = nn.Conv2d(32, 1, kernel_size=1, padding=0, stride=1, bias=True)


    def forward(self, x):

        out = x                       #;print('x    ',x.size())
                                      #
        #down0,out = self.down0(out)  ##;print('down0',down0.size())  #512
        #down1,out = self.down1(out)  ##;print('down1',down1.size())  #256
        down2,out = self.down2(out)   #;print('down2',down2.size())  #128
        down3,out = self.down3(out)   #;print('down3',down3.size())  #64
        down4,out = self.down4(out)   #;print('down4',down4.size())  #32
        down5,out = self.down5(out)   #;print('down5',down5.size())  #16
        down6,out = self.down6(out)   #;print('down6',down6.size())  #8
        pass                          #;print('out  ',out.size())

        out = self.center(out)
        out = self.up6(down6, out)
        out = self.up5(down5, out)
        out = self.up4(down4, out)
        out = self.up3(down3, out)
        out = self.up2(down2, out)
        #out = self.up1(down1, out)
        #out = self.up0(down0, out)
        #1024

        out = self.classify(out)
        out = torch.squeeze(out, dim=1)
        return out


** start training here! **
 num_grad_acc x batch_size = 1 x 16=16
 optimizer=<torch.optim.sgd.SGD object at 0x7f5debc29ef0>
 LR=Step Learning Rates
rates=[' 0.0100', ' 0.0050', ' 0.0010', ' 0.0001', '-1.0000']
steps=['      0', '     35', '     40', '     42', '     44']


epoch    iter      rate   | valid_loss/acc | train_loss/acc | batch_loss/acc ... 
--------------------------------------------------------------------------------------------------
